<?xml version="1.0"?>
<ruleset name="msales base standard">
    <description>The msales base coding standard.</description>

    <rule ref="PSR2"/>

    <rule ref="../../../escapestudios/symfony2-coding-standard/Symfony2/Sniffs/Objects/ObjectInstantiationSniff.php"/>
    <rule ref="../../../escapestudios/symfony2-coding-standard/Symfony2/Sniffs/Arrays/MultiLineArrayCommaSniff.php"/>

    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <rule ref="Squiz.Strings.DoubleQuoteUsage"/>
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1"/>
        </properties>
    </rule>

    <rule ref="PEAR.Commenting.InlineComment"/>

    <!-- Not included -->
    <!-- Single blank line before namespace -->
    <!-- No empty phpdoc -->
    <!-- No useless else -->
    <!-- Method separation -->

    <!-- Symfony projects additions -->
    <rule ref="../../../escapestudios/symfony2-coding-standard/Symfony2/Sniffs/Classes"/>
    <rule ref="../../../escapestudios/symfony2-coding-standard/Symfony2/Sniffs/Commenting/FunctionCommentSniff.php"/>
    <rule ref="../../../escapestudios/symfony2-coding-standard/Symfony2/Sniffs/Formatting"/>
    <rule ref="../../../escapestudios/symfony2-coding-standard/Symfony2/Sniffs/Functions"/>
    <rule ref="../../../escapestudios/symfony2-coding-standard/Symfony2/Sniffs/NamingConventions"/>
    <rule ref="../../../escapestudios/symfony2-coding-standard/Symfony2/Sniffs/Scope"/>
    <rule ref="../../../escapestudios/symfony2-coding-standard/Symfony2/Sniffs/WhiteSpace">
        <exclude name="Symfony2.WhiteSpace.AssignmentSpacing.Invalid"/>
    </rule>
    <rule ref="../../../msales/code-style/codesniffer/Msales/Sniffs/WhiteSpace"/>

    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Generic.Functions.CallTimePassByReference"/>
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Squiz.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <rule ref="Squiz.Scope.MemberVarScope"/>

    <!-- Import Zend coding standard (which in turn imports PEAR) -->
    <rule ref="Zend">
        <!-- but exclude their code analyzer -->
        <exclude name="Zend.Debug.CodeAnalyzer"/>

        <!-- covered by Squiz ControlSignature, which enforces try/catch as well -->
        <exclude name="PEAR.ControlStructures.ControlSignature"/>

        <exclude name="PEAR.Commenting.FunctionComment.SpacingBeforeTags"/>

        <!-- do not check line length -->
        <exclude name="Generic.Files.LineLength"/>

        <!-- covered by Squiz FunctionDeclarationSniff -->
        <exclude name="Generic.Functions.OpeningFunctionBraceBsdAllman.BraceOnSameLine"/>
    </rule>

    <!-- Don't enforce Zend's private member underscores -->
    <rule ref="Zend.NamingConventions.ValidVariableName.PrivateNoUnderscore">
        <severity>0</severity>
    </rule>

    <!-- Ignore variables that contains numbers -->
    <rule ref="Zend.NamingConventions.ValidVariableName.ContainsNumbers">
        <severity>0</severity>
    </rule>

    <!-- In practice, Symfony2 spaces multiline function calls differently than Zend -->
    <rule ref="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Functions.FunctionCallSignature.SpaceAfterCloseBracket">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Functions.FunctionCallSignature.CloseBracketLine">
        <severity>0</severity>
    </rule>

    <rule ref="Symfony2.Commenting.FunctionComment.MissingParamComment">
        <severity>0</severity>
    </rule>

    <rule ref="Symfony2.Commenting.FunctionComment.SpacingBeforeTags">
        <severity>0</severity>
    </rule>
</ruleset>
